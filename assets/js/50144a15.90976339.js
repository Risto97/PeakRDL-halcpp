"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[216],{5680:(e,n,r)=>{r.d(n,{xA:()=>s,yg:()=>y});var t=r(6540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},s=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,y=d["".concat(p,".").concat(m)]||d[m]||g[m]||a;return r?t.createElement(y,o(o({ref:n},s),{},{components:r})):t.createElement(y,o({ref:n},s))}));function y(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7183:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(8168),i=(r(6540),r(5680));const a={sidebar_position:7},o="RegFileNode",l={unversionedId:"hierarchy/nodes/regfile/regfile",id:"hierarchy/nodes/regfile/regfile",title:"RegFileNode",description:"RegFileNode is a template class that represents a regfile component in SystemRDL.",source:"@site/docs/hierarchy/nodes/regfile/regfile.md",sourceDirName:"hierarchy/nodes/regfile",slug:"/hierarchy/nodes/regfile/",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/regfile/",draft:!1,editUrl:"https://github.com/risto97/peakrdl-halcpp/tree/master/docs/hierarchy/nodes/regfile/regfile.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"documentationSidebar",previous:{title:"ArchIoNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/arch_io/"},next:{title:"Compiler Explorer",permalink:"/PeakRDL-halcpp/docs/compiler_explorer"}},p={},c=[{value:"<code>RegFileBase</code>",id:"regfilebase",level:2}],s={toc:c},d="wrapper";function g(e){let{components:n,...r}=e;return(0,i.yg)(d,(0,t.A)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"regfilenode"},"RegFileNode"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"RegFileNode")," is a template class that represents a ",(0,i.yg)("inlineCode",{parentName:"p"},"regfile")," component in SystemRDL.",(0,i.yg)("br",null),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"RegFileNode")," can contain only ",(0,i.yg)("inlineCode",{parentName:"p"},"RegNodes")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"RegFileNodes"),", and it must be instantiated within ",(0,i.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"RegFileNode"),"."),(0,i.yg)("h2",{id:"regfilebase"},(0,i.yg)("inlineCode",{parentName:"h2"},"RegFileBase")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"RegFileNode")," is a class providing ",(0,i.yg)("inlineCode",{parentName:"p"},"constexpr")," constants for basic information about the register."),(0,i.yg)("p",null,"It is a template that takes the following template arguments"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE, typename PARENT_TYPE>\nclass RegfileNode {\n")),(0,i.yg)("p",null,"The template parameters are:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"BASE")," is an address offset within an ",(0,i.yg)("inlineCode",{parentName:"li"},"AddrmapNode")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"RegFileNode"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"PARENT_TYPE")," accepts a specialization of an ",(0,i.yg)("inlineCode",{parentName:"li"},"AddrmapNode")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"RegFileNode")," template, and is the type of the containing node.")))}g.isMDXComponent=!0}}]);