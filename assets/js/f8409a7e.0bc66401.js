"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[206],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Introduction",s={unversionedId:"intro",id:"intro",title:"Introduction",description:"PeakRDL-halcpp is a free and open-source C++ (HAL) Hardware Abstraction Layer generator.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/intro",permalink:"/PeakRDL-halcpp/docs/intro",draft:!1,editUrl:"https://github.com/risto97/peakrdl-halcpp/tree/master/docs/intro.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"documentationSidebar",next:{title:"Getting Started",permalink:"/PeakRDL-halcpp/docs/category/getting-started"}},l={},c=[{value:"Features",id:"features",level:2},{value:"Assignment and conversion operators",id:"assignment-and-conversion-operators",level:3},{value:"Constants and enumerations",id:"constants-and-enumerations",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"PeakRDL-halcpp is a free and open-source C++ (HAL) Hardware Abstraction Layer generator.\nThe tool converts a SystemRDL description into a C++ low level HAL drivers.\nGenerated drivers are meant to be used for interfacing the registers in the IP block, usually by a CPU connected to the peripheral through a bus."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Generated drivers are based on C++17 standard"),(0,a.kt)("li",{parentName:"ul"},"The size and performance of the compiled binary is the same as equivalent C drivers"),(0,a.kt)("li",{parentName:"ul"},"Generated drivers preserve the hierarchy of the source SystemRDL description, composing a C++ template class based hierarchy"),(0,a.kt)("li",{parentName:"ul"},"Use only embedded friendly parts of the C++ standard to be suitable for resource constrained environments like microcontrollers ")),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("p",null,"Some of the features that are available within the drivers:"),(0,a.kt)("h3",{id:"assignment-and-conversion-operators"},"Assignment and conversion operators"),(0,a.kt)("p",null,"Assignment and conversion operators are provided for Fields and Registers in order to have a nicer and more readable code.",(0,a.kt)("br",null),"\nIt is possible to write code like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"soc.gpio0.ODR = 0xff;\nuint32_t in_data = soc.gpio0.IDR;\n")),(0,a.kt)("p",null,"An equivalent code without using the operators would be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"soc.gpio0.ODR.set(0xff);\nuint32_t in_data = soc.gpio0.IDR.get();\n")),(0,a.kt)("h3",{id:"constants-and-enumerations"},"Constants and enumerations"),(0,a.kt)("p",null,"There is a ",(0,a.kt)("inlineCode",{parentName:"p"},"Const")," type that provides a compile time constant.\nOn top of ",(0,a.kt)("inlineCode",{parentName:"p"},"Const")," class enumerations are constructed from the SystemRDL description."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Const")," class also provides a concatenation with ",(0,a.kt)("inlineCode",{parentName:"p"},",")," (comma) operator, so its possible to assign value to a register like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"soc.gpio0.CFG0 = (pincfg::IN, pincfg::OUT, pincfg::OUT_PP, pincfg::OUT_OD);\n")),(0,a.kt)("p",null,"The goal is to avoid magical numbers in your code, which can look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"soc.gpio0.CFG0 = 0x123456;\n")),(0,a.kt)("p",null,"In previous case ",(0,a.kt)("inlineCode",{parentName:"p"},"CFG0")," is a 24-bit register and pincfg is a 3-bit enum, so the total number of bits in the concatenation will amount to 12, this will cause a compilation error.\nIt is by default strongly typed and does not allow width missmatch. To solve this in previous example, it is neccessary to pad the list with Const, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"soc.gpio0.CFG0 = (Const<12, 0>(), pincfg::IN, pincfg::OUT, pincfg::OUT_PP, pincfg::OUT_OD);\n")),(0,a.kt)("p",null,"Const is the template that the other enums are built from, and its parameters are ",(0,a.kt)("inlineCode",{parentName:"p"},"Const<WIDTH, VAL>")))}u.isMDXComponent=!0}}]);