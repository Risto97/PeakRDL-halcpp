"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[617],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>N});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=l(n),h=r,N=c["".concat(p,".").concat(h)]||c[h]||s[h]||o;return n?a.createElement(N,d(d({ref:t},m),{},{components:n})):a.createElement(N,d({ref:t},m))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,d=new Array(o);d[0]=h;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,d[1]=i;for(var l=2;l<o;l++)d[l]=n[l];return a.createElement.apply(null,d)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2244:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},d="AddrmapNode",i={unversionedId:"hierarchy/nodes/addrmap/addrmap",id:"hierarchy/nodes/addrmap/addrmap",title:"AddrmapNode",description:"AddrmapNode is a template class that represents an addrmap component in SystemRDL.",source:"@site/docs/hierarchy/nodes/addrmap/addrmap.md",sourceDirName:"hierarchy/nodes/addrmap",slug:"/hierarchy/nodes/addrmap/",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/addrmap/",draft:!1,editUrl:"https://github.com/risto97/peakrdl-halcpp/tree/master/docs/hierarchy/nodes/addrmap/addrmap.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"documentationSidebar",previous:{title:"RegNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/reg/"},next:{title:"MemNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/mem/"}},p={},l=[{value:"<code>AddrmapNode</code>",id:"addrmapnode-1",level:2},{value:"<code>AddrmapNode</code> with <code>PARENT_TYPE</code>",id:"addrmapnode-with-parent_type",level:3},{value:"Top <code>AddrmapNode</code>",id:"top_addrmap",level:3}],m={toc:l},c="wrapper";function s(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"addrmapnode"},"AddrmapNode"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," is a template class that represents an ",(0,r.kt)("inlineCode",{parentName:"p"},"addrmap")," component in SystemRDL.",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," can contain ",(0,r.kt)("inlineCode",{parentName:"p"},"RegNodes"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"MemNodes"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"RegFileNodes")," (TODO) and other ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNodes"),", but ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," can only be contained within another ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," or can be a top ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode"),"."),(0,r.kt)("h2",{id:"addrmapnode-1"},(0,r.kt)("inlineCode",{parentName:"h2"},"AddrmapNode")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," template has the following declarations:"),(0,r.kt)("h3",{id:"addrmapnode-with-parent_type"},(0,r.kt)("inlineCode",{parentName:"h3"},"AddrmapNode")," with ",(0,r.kt)("inlineCode",{parentName:"h3"},"PARENT_TYPE")),(0,r.kt)("p",null,"The following template is a general ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," which expect to be contained within another ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode"),".\nIn case of ",(0,r.kt)("inlineCode",{parentName:"p"},"read"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"write")," requests to this node, the requests will be forwarded to the containing node, as this node does not implement memory IO operations."),(0,r.kt)("p",null,"This template expects 2 parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BASE")," is a address offset within containing ",(0,r.kt)("inlineCode",{parentName:"li"},"AddrmapNode"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PARENT_TYPE")," is a type of the parent ",(0,r.kt)("inlineCode",{parentName:"li"},"AddrmapNode"),", a specialization of the ",(0,r.kt)("inlineCode",{parentName:"li"},"AddrmapNode")," where ",(0,r.kt)("inlineCode",{parentName:"li"},"PARENT_TYPE==void")," is provided ",(0,r.kt)("a",{parentName:"li",href:"#top_addrmap"},"below"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE, typename PARENT_TYPE = void>\nclass AddrmapNode;\n")),(0,r.kt)("h3",{id:"top_addrmap"},"Top ",(0,r.kt)("inlineCode",{parentName:"h3"},"AddrmapNode")),(0,r.kt)("p",null,"A special case of ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," is an addrmap node that is not contained within another ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode"),", but instead it implements the memory IO operations, and it ends the (getter, setter) call chain from lower levels of hierarchy.\nIt has the following declaration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE>\nclass AddrmapNode <BASE, void> : public ArchIoNode;\n")),(0,r.kt)("p",null,"As you can see it is a specialization of ",(0,r.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," where the ",(0,r.kt)("inlineCode",{parentName:"p"},"PARENT_TYPE==void"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"BASE")," parameter is the same."),(0,r.kt)("p",null,"An addition here is that it inherits an ",(0,r.kt)("a",{parentName:"p",href:"/docs/hierarchy/nodes/arch_io"},(0,r.kt)("inlineCode",{parentName:"a"},"ArchIoNode")),", which is a class that provides memory IO operations of the platform.",(0,r.kt)("br",null),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"ArchIoNode")," is expected to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"write32()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"read32()")," methods."))}s.isMDXComponent=!0}}]);