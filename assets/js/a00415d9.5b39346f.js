"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[868],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),d=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),u=a,g=c["".concat(p,".").concat(u)]||c[u]||m[u]||r;return n?i.createElement(g,o(o({ref:t},s),{},{components:n})):i.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},o="RegNode",l={unversionedId:"hierarchy/nodes/reg/reg",id:"hierarchy/nodes/reg/reg",title:"RegNode",description:"RegNode is a template class that represents a reg component in SystemRDL.",source:"@site/docs/hierarchy/nodes/reg/reg.md",sourceDirName:"hierarchy/nodes/reg",slug:"/hierarchy/nodes/reg/",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/reg/",draft:!1,editUrl:"https://github.com/risto97/peakrdl-halcpp/tree/master/docs/hierarchy/nodes/reg/reg.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"documentationSidebar",previous:{title:"FieldNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/field/"},next:{title:"AddrmapNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/addrmap/"}},p={},d=[{value:"<code>RegBase</code>",id:"regbase",level:2},{value:"<code>RegRdMixin</code> and <code>RegWrMixin</code>",id:"regrdmixin-and-regwrmixin",level:2},{value:"Register access methods",id:"register-access-methods",level:3},{value:"<code>RegNode</code>",id:"regnode-1",level:2},{value:"<code>RegRO</code>",id:"regro",level:3},{value:"<code>FieldWO</code>",id:"fieldwo",level:3},{value:"<code>FieldRW</code>",id:"fieldrw",level:3}],s={toc:d},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"regnode"},"RegNode"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RegNode")," is a template class that represents a ",(0,a.kt)("inlineCode",{parentName:"p"},"reg")," component in SystemRDL.",(0,a.kt)("br",null),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"RegNode")," can contain only ",(0,a.kt)("inlineCode",{parentName:"p"},"FieldNodes"),", and it must be instantiated within ",(0,a.kt)("inlineCode",{parentName:"p"},"AddrmapNode")," (or ",(0,a.kt)("inlineCode",{parentName:"p"},"RegFileNode")," TODO)"),(0,a.kt)("h2",{id:"regbase"},(0,a.kt)("inlineCode",{parentName:"h2"},"RegBase")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RegBase")," is a base class providing ",(0,a.kt)("inlineCode",{parentName:"p"},"constexpr")," constants for basic information about the register.\nThe base class does not provide any ",(0,a.kt)("inlineCode",{parentName:"p"},"write")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," capabilities."),(0,a.kt)("p",null,"It is a template that takes the following template arguments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE, uint32_t WIDTH, typename PARENT_TYPE>\nclass RegBase {\n")),(0,a.kt)("p",null,"The template parameters are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"BASE")," is a address offset within an ",(0,a.kt)("inlineCode",{parentName:"li"},"AddrmapNode"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"WIDTH")," is a width of the register."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PARENT_TYPE")," accepts a specialization of a ",(0,a.kt)("inlineCode",{parentName:"li"},"AddrmapNode")," template, and is the type of the containing addrmap.\nIt is necessary to pass this type, because the ",(0,a.kt)("inlineCode",{parentName:"li"},"write")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"read")," methods of the field will pass these requests to the parent register, along with the value written.")),(0,a.kt)("h2",{id:"regrdmixin-and-regwrmixin"},(0,a.kt)("inlineCode",{parentName:"h2"},"RegRdMixin")," and ",(0,a.kt)("inlineCode",{parentName:"h2"},"RegWrMixin")),(0,a.kt)("p",null,"Since the ",(0,a.kt)("inlineCode",{parentName:"p"},"RegBase")," class does not provide any ",(0,a.kt)("inlineCode",{parentName:"p"},"write")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," capabilities, these two ",(0,a.kt)("inlineCode",{parentName:"p"},"Mixins")," are supposed to provide the additional capabilities to the registers.\nThey are supposed to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"setters")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"getters")," for the registers, along with operator overloads.\nThe memory access is not done by these mixins, but the requests are instead passed to the addrmap nodes."),(0,a.kt)("h3",{id:"register-access-methods"},"Register access methods"),(0,a.kt)("p",null,"The 2 mixins will provide at least the ",(0,a.kt)("inlineCode",{parentName:"p"},"get()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"set()")," methods for accessing the register."),(0,a.kt)("h2",{id:"regnode-1"},(0,a.kt)("inlineCode",{parentName:"h2"},"RegNode")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RegNode")," is a template class is inheriting the parameter pack of mixins. The prototype is as shown:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename... RegMixins>\nclass RegNode : public RegMixins...\n")),(0,a.kt)("p",null,"In order to provide Register that have ",(0,a.kt)("inlineCode",{parentName:"p"},"Read"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Write")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadWrite")," capabilites, the template ",(0,a.kt)("inlineCode",{parentName:"p"},"RegNode")," is inheriting parameter pack of ",(0,a.kt)("inlineCode",{parentName:"p"},"Mixins")," meant to provide the additional functionality."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RegNode")," inheriting only ",(0,a.kt)("inlineCode",{parentName:"li"},"RegRdMixin")," will be a ",(0,a.kt)("inlineCode",{parentName:"li"},"read-only")," register."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RegNode")," inheriting only ",(0,a.kt)("inlineCode",{parentName:"li"},"RegWrMixin")," will be a ",(0,a.kt)("inlineCode",{parentName:"li"},"write-only")," register."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"RegNode")," inheriting both ",(0,a.kt)("inlineCode",{parentName:"li"},"RegWrMixin")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"RegRdMixin")," will be a ",(0,a.kt)("inlineCode",{parentName:"li"},"read-write")," register.")),(0,a.kt)("p",null,"In order to ease the use of these templates, common specializations of ",(0,a.kt)("inlineCode",{parentName:"p"},"RegNode")," is already provided under the names:"),(0,a.kt)("h3",{id:"regro"},(0,a.kt)("inlineCode",{parentName:"h3"},"RegRO")),(0,a.kt)("p",null,"is a ",(0,a.kt)("inlineCode",{parentName:"p"},"read-only")," field with a declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE, uint32_t WIDTH, typename PARENT_TYPE>\nusing RegRO = ...\n")),(0,a.kt)("h3",{id:"fieldwo"},(0,a.kt)("inlineCode",{parentName:"h3"},"FieldWO")),(0,a.kt)("p",null,"is a ",(0,a.kt)("inlineCode",{parentName:"p"},"write-only")," field with a declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE, uint32_t WIDTH, typename PARENT_TYPE>\nusing RegWO = ...\n")),(0,a.kt)("h3",{id:"fieldrw"},(0,a.kt)("inlineCode",{parentName:"h3"},"FieldRW")),(0,a.kt)("p",null,"is a ",(0,a.kt)("inlineCode",{parentName:"p"},"read-write")," field with a declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE, uint32_t WIDTH, typename PARENT_TYPE>\nusing RegRW = ...\n")),(0,a.kt)("p",null,"It is adviced to use these specializations to construct your registers"))}m.isMDXComponent=!0}}]);