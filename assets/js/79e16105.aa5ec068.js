"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[515],{5680:(e,r,n)=>{n.d(r,{xA:()=>d,yg:()=>u});var t=n(6540);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),p=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},d=function(e){var r=p(e.components);return t.createElement(l.Provider,{value:r},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=p(n),m=o,u=s["".concat(l,".").concat(m)]||s[m]||h[m]||i;return n?t.createElement(u,a(a({ref:r},d),{},{components:n})):t.createElement(u,a({ref:r},d))}));function u(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[s]="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2703:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var t=n(8168),o=(n(6540),n(5680));const i={sidebar_position:6},a="ArchIoNode",c={unversionedId:"hierarchy/nodes/arch_io/arch_io",id:"hierarchy/nodes/arch_io/arch_io",title:"ArchIoNode",description:"This node is meant to provide the memory IO operation of the platform.",source:"@site/docs/hierarchy/nodes/arch_io/arch_io.md",sourceDirName:"hierarchy/nodes/arch_io",slug:"/hierarchy/nodes/arch_io/",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/arch_io/",draft:!1,editUrl:"https://github.com/risto97/peakrdl-halcpp/tree/master/docs/hierarchy/nodes/arch_io/arch_io.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"documentationSidebar",previous:{title:"MemNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/mem/"},next:{title:"RegFileNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/regfile/"}},l={},p=[{value:"Overriding <code>ArchIoNode</code>",id:"overriding-archionode",level:2}],d={toc:p},s="wrapper";function h(e){let{components:r,...n}=e;return(0,o.yg)(s,(0,t.A)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"archionode"},"ArchIoNode"),(0,o.yg)("p",null,"This node is meant to provide the memory IO operation of the platform.\nIt is supposed to implement ",(0,o.yg)("inlineCode",{parentName:"p"},"write32")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"read32")," methods."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"ArchIoNode")," is meant to be inherited by a top ",(0,o.yg)("inlineCode",{parentName:"p"},"AddrmapNode"),"."),(0,o.yg)("p",null,"By default a default ",(0,o.yg)("inlineCode",{parentName:"p"},"ArchIoNode")," is provided and will be copied to the output directory.\nThe default node provides a typical memory IO operations for a CPU.\nHowever it is possible to override this node in cases of:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Using generated halcpp drivers as a ",(0,o.yg)("inlineCode",{parentName:"li"},"UVM-RAL")," for ",(0,o.yg)("inlineCode",{parentName:"li"},"SystemC-UVM")," or ",(0,o.yg)("inlineCode",{parentName:"li"},"C++")," testbenches."),(0,o.yg)("li",{parentName:"ul"},"For debugging, where you might want to replace memory IO with console prints"),(0,o.yg)("li",{parentName:"ul"},"For Emulation, where you might want to model memory IO operations and side effects in the platform."),(0,o.yg)("li",{parentName:"ul"},"Or Simply if the provided ",(0,o.yg)("inlineCode",{parentName:"li"},"ArchIoNode")," is not adequate.")),(0,o.yg)("h2",{id:"overriding-archionode"},"Overriding ",(0,o.yg)("inlineCode",{parentName:"h2"},"ArchIoNode")),(0,o.yg)("p",null,"In order to override the default class the easiest way to do it is following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'#define _ARCH_IO_H_\n\nclass ArchIoNode {\npublic:\n// ... Your custom implementation\n};\n\n#include "soc_hal.h"\n')),(0,o.yg)("p",null,"The easiest solution is to define macro ",(0,o.yg)("inlineCode",{parentName:"p"},"_ARCH_IO_H_")," before including the HAL driver header file (in this case ",(0,o.yg)("inlineCode",{parentName:"p"},"soc_hal.h"),").\nAfter that you need to provide your custom implementation for ArchIoNode."))}h.isMDXComponent=!0}}]);