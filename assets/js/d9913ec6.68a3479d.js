"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[679],{5680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>h});var r=a(6540);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function d(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var p=r.createContext({}),l=function(e){var n=r.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):d(d({},n),e)),a},m=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,o=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=l(a),y=t,h=c["".concat(p,".").concat(y)]||c[y]||s[y]||o;return a?r.createElement(h,d(d({ref:n},m),{},{components:a})):r.createElement(h,d({ref:n},m))}));function h(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=a.length,d=new Array(o);d[0]=y;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:t,d[1]=i;for(var l=2;l<o;l++)d[l]=a[l];return r.createElement.apply(null,d)}return r.createElement.apply(null,a)}y.displayName="MDXCreateElement"},3391:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=a(8168),t=(a(6540),a(5680));const o={sidebar_position:4},d="AddrmapNode",i={unversionedId:"hierarchy/nodes/addrmap/addrmap",id:"hierarchy/nodes/addrmap/addrmap",title:"AddrmapNode",description:"AddrmapNode is a template class that represents an addrmap component in SystemRDL.",source:"@site/docs/hierarchy/nodes/addrmap/addrmap.md",sourceDirName:"hierarchy/nodes/addrmap",slug:"/hierarchy/nodes/addrmap/",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/addrmap/",draft:!1,editUrl:"https://github.com/risto97/peakrdl-halcpp/tree/master/docs/hierarchy/nodes/addrmap/addrmap.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"documentationSidebar",previous:{title:"RegNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/reg/"},next:{title:"MemNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/mem/"}},p={},l=[{value:"<code>AddrmapNode</code>",id:"addrmapnode-1",level:2},{value:"<code>AddrmapNode</code> with <code>PARENT_TYPE</code>",id:"addrmapnode-with-parent_type",level:3},{value:"Top <code>AddrmapNode</code>",id:"top_addrmap",level:3}],m={toc:l},c="wrapper";function s(e){let{components:n,...a}=e;return(0,t.yg)(c,(0,r.A)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"addrmapnode"},"AddrmapNode"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," is a template class that represents an ",(0,t.yg)("inlineCode",{parentName:"p"},"addrmap")," component in SystemRDL.",(0,t.yg)("br",null),"\n",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," can contain ",(0,t.yg)("inlineCode",{parentName:"p"},"RegNodes"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"MemNodes"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"RegFileNodes")," and other ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNodes"),", but an ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," can only be contained within another ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," or can be a top ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode"),"."),(0,t.yg)("h2",{id:"addrmapnode-1"},(0,t.yg)("inlineCode",{parentName:"h2"},"AddrmapNode")),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," template has the following declarations:"),(0,t.yg)("h3",{id:"addrmapnode-with-parent_type"},(0,t.yg)("inlineCode",{parentName:"h3"},"AddrmapNode")," with ",(0,t.yg)("inlineCode",{parentName:"h3"},"PARENT_TYPE")),(0,t.yg)("p",null,"The following template is a general ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," which expect to be contained within another ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode"),".\nIn case of ",(0,t.yg)("inlineCode",{parentName:"p"},"read"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"write")," requests to this node, the requests will be forwarded to the containing node, as this node does not implement memory IO operations."),(0,t.yg)("p",null,"This template expects 2 parameters:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"BASE")," is an address offset within containing ",(0,t.yg)("inlineCode",{parentName:"li"},"AddrmapNode"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"PARENT_TYPE")," is a type of the parent ",(0,t.yg)("inlineCode",{parentName:"li"},"AddrmapNode"),", a specialization of the ",(0,t.yg)("inlineCode",{parentName:"li"},"AddrmapNode")," where ",(0,t.yg)("inlineCode",{parentName:"li"},"PARENT_TYPE==void")," is provided ",(0,t.yg)("a",{parentName:"li",href:"#top_addrmap"},"below"),".")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE, typename PARENT_TYPE = void>\nclass AddrmapNode;\n")),(0,t.yg)("h3",{id:"top_addrmap"},"Top ",(0,t.yg)("inlineCode",{parentName:"h3"},"AddrmapNode")),(0,t.yg)("p",null,"A special case of ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," is an addrmap node that is not contained within another ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode"),", but instead it implements the memory IO operations, and it ends the (getter, setter) call chain from lower levels of hierarchy.\nIt has the following declaration:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t BASE>\nclass AddrmapNode <BASE, void> : public ArchIoNode;\n")),(0,t.yg)("p",null,"As you can see it is a specialization of ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," where the ",(0,t.yg)("inlineCode",{parentName:"p"},"PARENT_TYPE==void"),".\nThe ",(0,t.yg)("inlineCode",{parentName:"p"},"BASE")," parameter is the same."),(0,t.yg)("p",null,"In addition, the top ",(0,t.yg)("inlineCode",{parentName:"p"},"AddrmapNode")," inherits an ",(0,t.yg)("a",{parentName:"p",href:"/docs/hierarchy/nodes/arch_io"},(0,t.yg)("inlineCode",{parentName:"a"},"ArchIoNode")),", which is a class that provides memory IO operations of the platform.",(0,t.yg)("br",null),"\n",(0,t.yg)("inlineCode",{parentName:"p"},"ArchIoNode")," is expected to implement ",(0,t.yg)("inlineCode",{parentName:"p"},"write32()")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"read32()")," methods."))}s.isMDXComponent=!0}}]);