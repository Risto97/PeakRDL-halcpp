"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[79],{5680:(e,i,n)=>{n.d(i,{xA:()=>s,yg:()=>m});var t=n(6540);function a(e,i,n){return i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n,e}function r(e,i){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);i&&(t=t.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var i=1;i<arguments.length;i++){var n=null!=arguments[i]?arguments[i]:{};i%2?r(Object(n),!0).forEach((function(i){a(e,i,n[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(n,i))}))}return e}function o(e,i){if(null==e)return{};var n,t,a=function(e,i){if(null==e)return{};var n,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],i.indexOf(n)>=0||(a[n]=e[n]);return a}(e,i);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],i.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=t.createContext({}),p=function(e){var i=t.useContext(d),n=i;return e&&(n="function"==typeof e?e(i):l(l({},i),e)),n},s=function(e){var i=p(e.components);return t.createElement(d.Provider,{value:i},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var i=e.children;return t.createElement(t.Fragment,{},i)}},y=t.forwardRef((function(e,i){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=p(n),y=a,m=g["".concat(d,".").concat(y)]||g[y]||c[y]||r;return n?t.createElement(m,l(l({ref:i},s),{},{components:n})):t.createElement(m,l({ref:i},s))}));function m(e,i){var n=arguments,a=i&&i.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=y;var o={};for(var d in i)hasOwnProperty.call(i,d)&&(o[d]=i[d]);o.originalType=e,o[g]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},9123:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=n(8168),a=(n(6540),n(5680));const r={sidebar_position:2},l="FieldNode",o={unversionedId:"hierarchy/nodes/field/field",id:"hierarchy/nodes/field/field",title:"FieldNode",description:"FieldNode is a template class that represents a field component in SystemRDL.",source:"@site/docs/hierarchy/nodes/field/field.md",sourceDirName:"hierarchy/nodes/field",slug:"/hierarchy/nodes/field/",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/field/",draft:!1,editUrl:"https://github.com/risto97/peakrdl-halcpp/tree/master/docs/hierarchy/nodes/field/field.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Nodes",permalink:"/PeakRDL-halcpp/docs/category/nodes"},next:{title:"RegNode",permalink:"/PeakRDL-halcpp/docs/hierarchy/nodes/reg/"}},d={},p=[{value:"<code>FieldBase</code>",id:"fieldbase",level:2},{value:"<code>FieldRdMixin</code> and <code>FieldWrMixin</code>",id:"fieldrdmixin-and-fieldwrmixin",level:2},{value:"Field access methods",id:"field-access-methods",level:3},{value:"Writing to a field",id:"writing-to-a-field",level:4},{value:"1. Containing register is <code>write only</code>",id:"1-containing-register-is-write-only",level:5},{value:"2. Containing register is <code>rw</code>",id:"2-containing-register-is-rw",level:5},{value:"Reading from a field",id:"reading-from-a-field",level:4},{value:"<code>FieldNode</code>",id:"fieldnode-1",level:2},{value:"<code>FieldRO</code>",id:"fieldro",level:3},{value:"<code>FieldWO</code>",id:"fieldwo",level:3},{value:"<code>FieldRW</code>",id:"fieldrw",level:3}],s={toc:p},g="wrapper";function c(e){let{components:i,...n}=e;return(0,a.yg)(g,(0,t.A)({},s,n,{components:i,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"fieldnode"},"FieldNode"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"FieldNode")," is a template class that represents a ",(0,a.yg)("inlineCode",{parentName:"p"},"field")," component in SystemRDL.",(0,a.yg)("br",null),"\n",(0,a.yg)("inlineCode",{parentName:"p"},"FieldNode")," is the lowest node in the hierarchy, and it can only be instantiated within a ",(0,a.yg)("inlineCode",{parentName:"p"},"RegNode")," component."),(0,a.yg)("h2",{id:"fieldbase"},(0,a.yg)("inlineCode",{parentName:"h2"},"FieldBase")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"FieldBase")," is a base class providing ",(0,a.yg)("inlineCode",{parentName:"p"},"constexpr")," constants for basic information about the field.\nThe base class does not provide any ",(0,a.yg)("inlineCode",{parentName:"p"},"write")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"read")," capabilities."),(0,a.yg)("p",null,"It is a template that takes the following template arguments"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t START_BIT, uint32_t END_BIT, typename PARENT_TYPE>\nclass FieldBase;\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"START_BIT")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"END_BIT")," represent the position of the field within the containing register. They are integers and represent ",(0,a.yg)("inlineCode",{parentName:"p"},"LSB")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"MSB")," respectively."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"PARENT_TYPE")," accepts a specialization of a ",(0,a.yg)("inlineCode",{parentName:"p"},"RegNode")," template, and is the type of the containing register.\nIt is necessary to pass this type, because the ",(0,a.yg)("inlineCode",{parentName:"p"},"write")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"read")," methods of the field will pass these requests to the parent register, along with the value written."),(0,a.yg)("h2",{id:"fieldrdmixin-and-fieldwrmixin"},(0,a.yg)("inlineCode",{parentName:"h2"},"FieldRdMixin")," and ",(0,a.yg)("inlineCode",{parentName:"h2"},"FieldWrMixin")),(0,a.yg)("p",null,"Since the ",(0,a.yg)("inlineCode",{parentName:"p"},"FieldBase")," class does not provide any ",(0,a.yg)("inlineCode",{parentName:"p"},"write")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"read")," capabilities, these two ",(0,a.yg)("inlineCode",{parentName:"p"},"Mixins")," are supposed to provide the additional capabilities to the fields.\nThey are supposed to provide ",(0,a.yg)("inlineCode",{parentName:"p"},"setters")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"getters")," for the fields, along with operator overloads.\nThe memory access is not done by these mixins, but the requests are instead passed to the register nodes."),(0,a.yg)("h3",{id:"field-access-methods"},"Field access methods"),(0,a.yg)("p",null,"The 2 mixins will provide at least the ",(0,a.yg)("inlineCode",{parentName:"p"},"get()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"set()")," methods for accessing the field.\nThe execution of getters and setters will depend on the type of the containing register."),(0,a.yg)("h4",{id:"writing-to-a-field"},"Writing to a field"),(0,a.yg)("p",null,"In case of a writing a value to a field there are 2 cases."),(0,a.yg)("h5",{id:"1-containing-register-is-write-only"},"1. Containing register is ",(0,a.yg)("inlineCode",{parentName:"h5"},"write only")),(0,a.yg)("p",null,"In this case the value passed to the register for writing will just be the value written to the field shifted by ",(0,a.yg)("inlineCode",{parentName:"p"},"LSB"),".\nThis will correspond to only 1 write memory access, and an additional shifting operation if the passed value is a variable."),(0,a.yg)("h5",{id:"2-containing-register-is-rw"},"2. Containing register is ",(0,a.yg)("inlineCode",{parentName:"h5"},"rw")),(0,a.yg)("p",null,"In this case it is necessary to read first the register value and apply a mask corresponding to the location of the field."),(0,a.yg)("p",null,"The field ",(0,a.yg)("inlineCode",{parentName:"p"},"set()")," method will first read a value from the containing register, apply a mask, and ",(0,a.yg)("inlineCode",{parentName:"p"},"|")," (OR) the value with the shifted value of the passed argument to the ",(0,a.yg)("inlineCode",{parentName:"p"},"set()")," method."),(0,a.yg)("p",null,"This will correspond to 1 read memory operation first, followed by arithmetic operations for masking (can vary) and a write memory operation."),(0,a.yg)("h4",{id:"reading-from-a-field"},"Reading from a field"),(0,a.yg)("p",null,"In case of reading from a field, the operation does not depend on the containing register, and the value returned from ",(0,a.yg)("inlineCode",{parentName:"p"},"get()")," function will just be containing register value with applied mask and shifted right by ",(0,a.yg)("inlineCode",{parentName:"p"},"LSB"),".\nIt will in this case have 1 read memory access, and arithmetic operation for mask and shifting (can vary)."),(0,a.yg)("h2",{id:"fieldnode-1"},(0,a.yg)("inlineCode",{parentName:"h2"},"FieldNode")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"FieldNode")," is a template class inheriting the parameter pack of mixins. The prototype is as shown:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"template <typename... FieldMixins>\nclass FieldNode : public FieldMixins...\n")),(0,a.yg)("p",null,"In order to provide Registers and Fields that have ",(0,a.yg)("inlineCode",{parentName:"p"},"Read"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Write")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"ReadWrite")," capabilities, the templates ",(0,a.yg)("inlineCode",{parentName:"p"},"FieldNode")," are inheriting parameter pack of ",(0,a.yg)("inlineCode",{parentName:"p"},"Mixins")," meant to provide the additional functionality."),(0,a.yg)("p",null,"For example:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"FieldNode")," inheriting only ",(0,a.yg)("inlineCode",{parentName:"li"},"FieldRdMixin")," will be a ",(0,a.yg)("inlineCode",{parentName:"li"},"read-only")," field."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"FieldNode")," inheriting only ",(0,a.yg)("inlineCode",{parentName:"li"},"FieldWrMixin")," will be a ",(0,a.yg)("inlineCode",{parentName:"li"},"write-only")," field."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"FieldNode")," inheriting both ",(0,a.yg)("inlineCode",{parentName:"li"},"FieldWrMixin")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"FieldRdMixin")," will be a ",(0,a.yg)("inlineCode",{parentName:"li"},"read-write")," field.")),(0,a.yg)("p",null,"In order to ease the use of these templates, common specializations of ",(0,a.yg)("inlineCode",{parentName:"p"},"FieldNode")," is already provided under the names:"),(0,a.yg)("h3",{id:"fieldro"},(0,a.yg)("inlineCode",{parentName:"h3"},"FieldRO")),(0,a.yg)("p",null,"is a ",(0,a.yg)("inlineCode",{parentName:"p"},"read-only")," field with a declaration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t START_BIT, uint32_t END_BIT, typename PARENT_TYPE>\nusing FieldRO = ...\n")),(0,a.yg)("h3",{id:"fieldwo"},(0,a.yg)("inlineCode",{parentName:"h3"},"FieldWO")),(0,a.yg)("p",null,"is a ",(0,a.yg)("inlineCode",{parentName:"p"},"write-only")," field with a declaration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t START_BIT, uint32_t END_BIT, typename PARENT_TYPE>\nusing FieldWO = ...\n")),(0,a.yg)("h3",{id:"fieldrw"},(0,a.yg)("inlineCode",{parentName:"h3"},"FieldRW")),(0,a.yg)("p",null,"is a ",(0,a.yg)("inlineCode",{parentName:"p"},"read-write")," field with a declaration:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},"template <uint32_t START_BIT, uint32_t END_BIT, typename PARENT_TYPE>\nusing FieldRW = ...\n")),(0,a.yg)("p",null,"It is advised to use these specializations to construct your fields."))}c.isMDXComponent=!0}}]);